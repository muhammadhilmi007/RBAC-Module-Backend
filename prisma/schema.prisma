// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  roleId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role          Role     @relation(fields: [roleId], references: [id])
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]
}

model Role {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  description    String?
  parentRoleId   Int?     // Parent role reference for inheritance
  
  users          User[]
  acl            ACL[]
  
  // Self-reference for role inheritance
  parentRole     Role?    @relation("RoleInheritance", fields: [parentRoleId], references: [id])
  childRoles     Role[]   @relation("RoleInheritance")
}

model Feature {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  route     String?  // URL path for the feature
  icon      String?  // Icon name for UI
  
  acl       ACL[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  
  acl       ACL[]
}

model ACL {
  id           Int      @id @default(autoincrement())
  roleId       Int
  featureId    Int
  permissionId Int
  
  role         Role       @relation(fields: [roleId], references: [id])
  feature      Feature    @relation(fields: [featureId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, featureId, permissionId]) // Mencegah duplikasi hak akses
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  userId        Int
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isRevoked     Boolean  @default(false)

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model AuditLog {
  id            Int      @id @default(autoincrement())
  userId        Int
  action        String   // Tipe aktivitas: CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  module        String   // Modul/fitur yang diakses: User, Role, Feature, etc.
  description   String   // Deskripsi aktivitas
  ipAddress     String?  // Alamat IP pengguna
  userAgent     String?  // Browser/aplikasi yang digunakan
  resourceId    String?  // ID resource yang terkena dampak (jika ada)
  oldValues     Json?    // Nilai sebelum perubahan (untuk UPDATE)
  newValues     Json?    // Nilai setelah perubahan (untuk CREATE/UPDATE)
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([module])
  @@index([createdAt])
}